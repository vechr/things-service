datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

enum WidgetType{
  BAR
  BUBBLE
  DOUGHNUT
  PIE
  GAUGE
  LINE
  POLAR
  RADAR
  SCATTER
  MAPS
}

model Dashboard {
  id                          String @id @default(uuid()) @db.VarChar(36)
  name                        String @unique @db.VarChar(50)
  description                 String? @db.Text()
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt()
  devices                     DashboardsDevices[]
  widgets                     Widget[]

  @@map("dashboards")
}

model Widget {
  id                          String @id @default(uuid()) @db.VarChar(36)
  Dashboard                   Dashboard @relation(fields: [dashboardId], references: [id])
  dashboardId                 String @db.VarChar(36)
  name                        String @db.VarChar(50)
  description                 String? @db.Text()
  node                        Json
  nodeId                      String @db.VarChar(50)
  widgetData                  Json
  widgetType                  WidgetType
  shiftData                   Boolean?
  topic                       Topic @relation(fields: [topicId], references: [id])
  topicId                     String @db.VarChar(36)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt()

  @@map("widgets")
}

model DashboardsDevices {
  device                      Device @relation(fields: [deviceId], references: [id])
  deviceId                    String @db.VarChar(36)
  dashboard                   Dashboard @relation(fields: [dashboardId], references: [id])
  dashboardId                 String @db.VarChar(36)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt()

  @@id([deviceId, dashboardId])
  @@map("dashboards_devices")
}

model Device {
  id                          String @id @default(uuid()) @db.VarChar(36)
  deviceType                  DeviceType @relation(fields: [deviceTypeId], references: [id])
  deviceTypeId                String @db.VarChar(36)
  name                        String @unique @db.VarChar(50)
  description                 String? @db.Text()
  isActive                    Boolean
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt()
  dashboards                  DashboardsDevices[]
  topics                      Topic[]

  @@map("devices")
}

model DeviceType {
  id                          String @id @default(uuid()) @db.VarChar(36)
  name                        String @unique @db.VarChar(50)
  description                 String? @db.Text()
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt()
  devices                     Device[]

  @@map("device_types")
}

model Topic {
  id                          String @id @default(uuid()) @db.VarChar(36)
  device                      Device @relation(fields: [deviceId], references: [id])
  deviceId                    String @db.VarChar(36)
  name                        String @db.VarChar(50)
  description                 String? @db.Text()
  widgetType                  WidgetType?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt()
  topicEvents                 TopicEvent[]
  widgets                     Widget[]

  @@map("topics")
}

model TopicEvent {
  id                          String @id @default(uuid()) @db.VarChar(36)
  topic                       Topic @relation(fields: [topicId], references: [id])
  topicId                     String @db.VarChar(36)
  name                        String @db.VarChar(50)
  description                 String? @db.Text()
  eventExpression             Json?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt()

  @@map("topic_events")
}